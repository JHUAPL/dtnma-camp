/****************************************************************************
 **
 ** File Name: adm_test_adm_mgr.c
 **
 ** Description: TODO
 **
 ** Notes: TODO
 **
 ** Assumptions: TODO
 **
 ** Modification History:
 **  YYYY-MM-DD  AUTHOR           DESCRIPTION
 **  ----------  --------------   --------------------------------------------
 **  {{datestamp}}  AUTO             Auto-generated c file
 **
 ****************************************************************************/


#include "ion.h"
#include "platform.h"
#include "adm_test_adm.h"
#include "shared/utils/utils.h"
#include "shared/primitives/report.h"
#include "shared/primitives/blob.h"
#include "metadata.h"
#include "nm_mgr_ui.h"

vec_idx_t g_test_ns_idx[11];

static void test_ns_init_meta(void);
static void test_ns_init_cnst(void);
static void test_ns_init_edd(void);
static void test_ns_init_op(void);
static void test_ns_init_var(void);
static void test_ns_init_ctrl(void);
static void test_ns_init_mac(void);
static void test_ns_init_rpttpl(void);
static void test_ns_init_tblt(void);

void test_ns_init()
{
	adm_add_adm_info("test_ns", ADM_ENUM_TEST_NS);

	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_META_IDX), &(g_test_ns_idx[ADM_META_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_CONST_IDX), &(g_test_ns_idx[ADM_CONST_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_EDD_IDX), &(g_test_ns_idx[ADM_EDD_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_OPER_IDX), &(g_test_ns_idx[ADM_OPER_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_VAR_IDX), &(g_test_ns_idx[ADM_VAR_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_CTRL_IDX), &(g_test_ns_idx[ADM_CTRL_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_RPTT_IDX), &(g_test_ns_idx[ADM_RPTT_IDX]));
	VDB_ADD_NN(((ADM_ENUM_TEST_NS * 20) + ADM_TBLT_IDX), &(g_test_ns_idx[ADM_TBLT_IDX]));


	test_ns_init_meta();
	test_ns_init_cnst();
	test_ns_init_edd();
	test_ns_init_op();
	test_ns_init_var();
	test_ns_init_ctrl();
	test_ns_init_mac();
	test_ns_init_rpttpl();
	test_ns_init_tblt();
}

void test_ns_init_meta()
{

	ari_t *id = NULL;

	id = adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_META_IDX], TEST_NS_META_NAME);
	adm_add_cnst(id, NULL);
	meta_add_cnst(AMP_TYPE_STR, id, ADM_ENUM_TEST_NS, "name", "The human-readable name of the ADM.");

	id = adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_META_IDX], TEST_NS_META_NAMESPACE);
	adm_add_cnst(id, NULL);
	meta_add_cnst(AMP_TYPE_STR, id, ADM_ENUM_TEST_NS, "namespace", "The namespace of the ADM.");

	id = adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_META_IDX], TEST_NS_META_VERSION);
	adm_add_cnst(id, NULL);
	meta_add_cnst(AMP_TYPE_STR, id, ADM_ENUM_TEST_NS, "version", "The version of the ADM.");

	id = adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_META_IDX], TEST_NS_META_ORGANIZATION);
	adm_add_cnst(id, NULL);
	meta_add_cnst(AMP_TYPE_STR, id, ADM_ENUM_TEST_NS, "organization", "The name of the issuing organization of the ADM.");

	id = adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_META_IDX], TEST_NS_META_ENUM);
	adm_add_cnst(id, NULL);
	meta_add_cnst(AMP_TYPE_UINT, id, ADM_ENUM_TEST_NS, "enum", "None");

}

void test_ns_init_cnst()
{

	ari_t *id = NULL;

	id = adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_CONST_IDX], TEST_NS_CNST_AMP_EPOCH);
	adm_add_cnst(id, NULL);
	meta_add_cnst(AMP_TYPE_TS, id, ADM_ENUM_TEST_NS, "amp_epoch", "This constant is the time epoch for the Agent.");

}

void test_ns_init_edd()
{

	ari_t *id = NULL;

	metadata_t *meta = NULL;

	id = adm_build_ari(AMP_TYPE_EDD, 0, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_EDD_UINT);
	adm_add_edd(id, NULL);
	meta_add_edd(AMP_TYPE_UINT, id, ADM_ENUM_TEST_NS, "edd_uint", "This is the number of report templates known to the Agent.");

	id = adm_build_ari(AMP_TYPE_EDD, 1, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_UINT_WITH_PARAM);
	adm_add_edd(id, NULL);
	meta = meta_add_edd(AMP_TYPE_UINT, id, ADM_ENUM_TEST_NS, "uint_with_param", "This is the number of report templates known to the Agent.");
	meta_add_parm(meta, "other", AMP_TYPE_UINT);

	id = adm_build_ari(AMP_TYPE_EDD, 0, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_EDD_TV);
	adm_add_edd(id, NULL);
	meta_add_edd(AMP_TYPE_TV, id, ADM_ENUM_TEST_NS, "edd_tv", "This is the current system time.");

	id = adm_build_ari(AMP_TYPE_EDD, 1, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_ENDPOINT_ACTIVE);
	adm_add_edd(id, NULL);
	meta = meta_add_edd(AMP_TYPE_UINT, id, ADM_ENUM_TEST_NS, "endpoint_active", "is the given endpoint active? (0=no)");
	meta_add_parm(meta, "endpoint_name", AMP_TYPE_STR);

}

void test_ns_init_op()
{

	ari_t *id = NULL;

	metadata_t *meta = NULL;

	id = adm_build_ari(AMP_TYPE_OPER, 1, g_test_ns_idx[ADM_OPER_IDX], TEST_NS_OP_PLUSINT);
	adm_add_op_ari(id, 2, NULL);
	meta = meta_add_op(AMP_TYPE_INT, id, ADM_ENUM_TEST_NS, "plusINT", "Int32 addition");
	meta_add_parm(meta, "O1", AMP_TYPE_INT);
	meta_add_parm(meta, "O2", AMP_TYPE_INT);

	id = adm_build_ari(AMP_TYPE_OPER, 1, g_test_ns_idx[ADM_OPER_IDX], TEST_NS_OP_PLUSREAL64);
	adm_add_op_ari(id, 2, NULL);
	meta = meta_add_op(AMP_TYPE_REAL64, id, ADM_ENUM_TEST_NS, "plusREAL64", "Real64 addition");
	meta_add_parm(meta, "O1", AMP_TYPE_REAL64);
	meta_add_parm(meta, "O2", AMP_TYPE_REAL64);

}

void test_ns_init_var()
{

	ari_t *id = NULL;

	expr_t *expr = NULL;


	/* VAR_WITH_INIT */

	id = adm_build_ari(AMP_TYPE_VAR, 0, g_test_ns_idx[ADM_VAR_IDX], TEST_NS_VAR_VAR_WITH_INIT);
	expr = expr_create(AMP_TYPE_UINT);
	expr_add_item(expr, adm_build_ari(AMP_TYPE_EDD, 0, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_EDD_UINT));
	adm_add_var_from_expr(id, AMP_TYPE_UINT, expr);
	meta_add_var(AMP_TYPE_UINT, id, ADM_ENUM_TEST_NS, "var_with_init", "This is the number of rules known to the Agent (#TBR + #SBR).");

}

void test_ns_init_ctrl()
{

	ari_t *id = NULL;

	metadata_t *meta = NULL;


	/* ADD_VAR */

	id = adm_build_ari(AMP_TYPE_CTRL, 1, g_test_ns_idx[ADM_CTRL_IDX], TEST_NS_CTRL_ADD_VAR);
	adm_add_ctrldef_ari(id, 3, NULL);
	meta = meta_add_ctrl(id, ADM_ENUM_TEST_NS, "add_var", "This control configures a new variable definition on the Agent.");
	meta_add_parm(meta, "id", AMP_TYPE_ARI);
	meta_add_parm(meta, "def", AMP_TYPE_EXPR);
	meta_add_parm(meta, "type", AMP_TYPE_BYTE);

}

void test_ns_init_mac()
{

}

void test_ns_init_rpttpl()
{

	metadata_t *meta = NULL;

	rpttpl_t *def = NULL;

	/* FULL_REPORT */
	def = rpttpl_create_id(adm_build_ari(AMP_TYPE_RPTTPL, 0, g_test_ns_idx[ADM_RPTT_IDX], TEST_NS_RPTTPL_FULL_REPORT));
	rpttpl_add_item(def, adm_build_ari(AMP_TYPE_CNST, 0, g_test_ns_idx[ADM_META_IDX], TEST_NS_META_NAME));
	rpttpl_add_item(def, adm_build_ari(AMP_TYPE_VAR, 0, g_test_ns_idx[ADM_VAR_IDX], TEST_NS_VAR_VAR_WITH_INIT));
	rpttpl_add_item(def, adm_build_ari(AMP_TYPE_EDD, 0, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_UINT_WITH_PARAM));
	adm_add_rpttpl(def);
	meta_add_rpttpl(def->id, ADM_ENUM_TEST_NS, "full_report", "This is all known meta-data, EDD, and VAR values known by the agent.");
	/* ENDPOINT_REPORT */
	def = rpttpl_create_id(adm_build_ari(AMP_TYPE_RPTTPL, 1, g_test_ns_idx[ADM_RPTT_IDX], TEST_NS_RPTTPL_ENDPOINT_REPORT));
	rpttpl_add_item(def, adm_build_ari(AMP_TYPE_EDD, 0, g_test_ns_idx[ADM_EDD_IDX], TEST_NS_EDD_ENDPOINT_ACTIVE));
	adm_add_rpttpl(def);
	meta = meta_add_rpttpl(def->id, ADM_ENUM_TEST_NS, "endpoint_report", "This is all known endpoint information");
	meta_add_parm(meta, "endpoint_id", AMP_TYPE_STR);
}

void test_ns_init_tblt()
{

	tblt_t *def = NULL;

	/* VARIABLES */

	def = tblt_create(adm_build_ari(AMP_TYPE_TBLT, 0, g_test_ns_idx[ADM_TBLT_IDX], TEST_NS_TBLT_VARIABLES), NULL);
	tblt_add_col(def, AMP_TYPE_ARI, "ids");
	adm_add_tblt(def);
	meta_add_tblt(def->id, ADM_ENUM_TEST_NS, "variables", "This table lists the ARI for every variable that is known to the agent.");

	/* RPTTS */

	def = tblt_create(adm_build_ari(AMP_TYPE_TBLT, 0, g_test_ns_idx[ADM_TBLT_IDX], TEST_NS_TBLT_RPTTS), NULL);
	tblt_add_col(def, AMP_TYPE_ARI, "ids");
	adm_add_tblt(def);
	meta_add_tblt(def->id, ADM_ENUM_TEST_NS, "rptts", "This table lists the ARI for every report template that is known to the agent.");
}

